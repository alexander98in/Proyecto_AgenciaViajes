/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import logica_negocio.GestorUsuarios;
import logica_negocio.Usuario;
import utilidades.Utilidades;

/**
 *
 * @author Alexander Inagan
 */
public class GUIUsuarios extends javax.swing.JInternalFrame {

    private final GestorUsuarios gestor_usuarios;
    private String contrasenia_user = "";
    private String contrasenia_user_con = "";
    
    /**
     * Creates new form GUIUsuarios
     */
    public GUIUsuarios() {
        initComponents();
        gestor_usuarios = new GestorUsuarios();
        botoneEstadoInicial();
    }

    private String get_identificacion() {
        return jtxtIdentificacion.getText().trim();
    }
    
    private String getNombre_Usuario() {
        return jtxtNombre_Usuario.getText().trim();
    }
    
    private String getContrasenia() {
        String contrasenia = "";
        if(this.contrasenia_user.equals(contrasenia_user_con))
            contrasenia = contrasenia_user;
        return contrasenia;
    }
    
    private String getNombre_Completo() {
        return jtxtNombre_Completo.getText().trim();
    }
    
    private String getFecha_Creacion() {
        Date fecha = new Date();
        DateFormat fecha_formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String fecha_creacion = fecha_formato.format(fecha);
        return fecha_creacion;
    }
    
    private String getCargo() {
        String cargo = jcboxCargo.getSelectedItem().toString();
        return cargo;
    }
    
    private void botoneEstadoInicial() {
        jbtnAgregar.setEnabled(false);
        jbtnEditar.setEnabled(false);
        jbtnConsultar.setEnabled(false);
        jbtnEliminar.setEnabled(false);
        jPassword_con.setEditable(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelNorte = new javax.swing.JPanel();
        jLabelTitulo = new javax.swing.JLabel();
        jPanelCentro = new javax.swing.JPanel();
        jLabelIdentificacion = new javax.swing.JLabel();
        jtxtIdentificacion = new javax.swing.JTextField();
        jLabelNombre_Usuario = new javax.swing.JLabel();
        jtxtNombre_Usuario = new javax.swing.JTextField();
        jLabelContrasenia = new javax.swing.JLabel();
        jPassword = new javax.swing.JPasswordField();
        jLabelContrasenia_con = new javax.swing.JLabel();
        jPassword_con = new javax.swing.JPasswordField();
        jLabelNombre_Completo = new javax.swing.JLabel();
        jtxtNombre_Completo = new javax.swing.JTextField();
        jLabelCargo = new javax.swing.JLabel();
        jcboxCargo = new javax.swing.JComboBox<>();
        jPanelSur = new javax.swing.JPanel();
        jPanelBotones = new javax.swing.JPanel();
        jbtnAgregar = new javax.swing.JButton();
        jbtnEditar = new javax.swing.JButton();
        jbtnConsultar = new javax.swing.JButton();
        jbtnEliminar = new javax.swing.JButton();
        jbtnLimpiar = new javax.swing.JButton();
        jbtnCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Usuarios");

        jpanelNorte.setBackground(new java.awt.Color(255, 130, 79));
        jpanelNorte.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 13))); // NOI18N
        jpanelNorte.setLayout(new java.awt.BorderLayout());

        jLabelTitulo.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 30)); // NOI18N
        jLabelTitulo.setForeground(new java.awt.Color(101, 2, 2));
        jLabelTitulo.setText("Gestión de Usuarios...");
        jpanelNorte.add(jLabelTitulo, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpanelNorte, java.awt.BorderLayout.NORTH);

        jPanelCentro.setBackground(new java.awt.Color(255, 176, 99));
        jPanelCentro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ingrese los datos solicitados: \n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 13))); // NOI18N
        jPanelCentro.setLayout(new java.awt.GridLayout(6, 2));

        jLabelIdentificacion.setFont(new java.awt.Font("Microsoft JhengHei Light", 1, 15)); // NOI18N
        jLabelIdentificacion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelIdentificacion.setText("Identificación:  ");
        jPanelCentro.add(jLabelIdentificacion);

        jtxtIdentificacion.setBackground(new java.awt.Color(204, 255, 204));
        jtxtIdentificacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtIdentificacionFocusLost(evt);
            }
        });
        jPanelCentro.add(jtxtIdentificacion);

        jLabelNombre_Usuario.setFont(new java.awt.Font("Microsoft JhengHei Light", 1, 15)); // NOI18N
        jLabelNombre_Usuario.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelNombre_Usuario.setText("Nombre Usuario:  ");
        jPanelCentro.add(jLabelNombre_Usuario);

        jtxtNombre_Usuario.setBackground(new java.awt.Color(204, 255, 204));
        jPanelCentro.add(jtxtNombre_Usuario);

        jLabelContrasenia.setFont(new java.awt.Font("Microsoft JhengHei Light", 1, 15)); // NOI18N
        jLabelContrasenia.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelContrasenia.setText("Contraseña:  ");
        jPanelCentro.add(jLabelContrasenia);

        jPassword.setBackground(new java.awt.Color(204, 255, 204));
        jPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPasswordFocusLost(evt);
            }
        });
        jPanelCentro.add(jPassword);

        jLabelContrasenia_con.setFont(new java.awt.Font("Microsoft JhengHei Light", 1, 15)); // NOI18N
        jLabelContrasenia_con.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelContrasenia_con.setText("Confirmar Contraseña:  ");
        jPanelCentro.add(jLabelContrasenia_con);

        jPassword_con.setBackground(new java.awt.Color(204, 255, 204));
        jPassword_con.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPassword_conFocusLost(evt);
            }
        });
        jPanelCentro.add(jPassword_con);

        jLabelNombre_Completo.setFont(new java.awt.Font("Microsoft JhengHei Light", 1, 15)); // NOI18N
        jLabelNombre_Completo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelNombre_Completo.setText("Nombre Completo:  ");
        jPanelCentro.add(jLabelNombre_Completo);

        jtxtNombre_Completo.setBackground(new java.awt.Color(204, 255, 204));
        jPanelCentro.add(jtxtNombre_Completo);

        jLabelCargo.setFont(new java.awt.Font("Microsoft JhengHei Light", 1, 15)); // NOI18N
        jLabelCargo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelCargo.setText("Cargo:  ");
        jPanelCentro.add(jLabelCargo);

        jcboxCargo.setBackground(new java.awt.Color(59, 215, 136));
        jcboxCargo.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jcboxCargo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ADMINISTRADOR", "USUARIO" }));
        jPanelCentro.add(jcboxCargo);

        getContentPane().add(jPanelCentro, java.awt.BorderLayout.CENTER);

        jPanelSur.setLayout(new java.awt.BorderLayout());

        jPanelBotones.setBackground(new java.awt.Color(255, 133, 55));

        jbtnAgregar.setBackground(new java.awt.Color(0, 204, 102));
        jbtnAgregar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbtnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/agregar.png"))); // NOI18N
        jbtnAgregar.setText("Agregar");
        jbtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAgregarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnAgregar);

        jbtnEditar.setBackground(new java.awt.Color(0, 153, 204));
        jbtnEditar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbtnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/grabar.png"))); // NOI18N
        jbtnEditar.setText("Editar");
        jbtnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnEditar);

        jbtnConsultar.setBackground(new java.awt.Color(204, 204, 204));
        jbtnConsultar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbtnConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/buscar.png"))); // NOI18N
        jbtnConsultar.setText("Consultar");
        jbtnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnConsultarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnConsultar);

        jbtnEliminar.setBackground(new java.awt.Color(255, 204, 102));
        jbtnEliminar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbtnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/remove.png"))); // NOI18N
        jbtnEliminar.setText("Eliminar");
        jbtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEliminarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnEliminar);

        jbtnLimpiar.setBackground(new java.awt.Color(179, 119, 90));
        jbtnLimpiar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbtnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/escoba.png"))); // NOI18N
        jbtnLimpiar.setText("Limpiar");
        jbtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLimpiarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnLimpiar);

        jbtnCerrar.setBackground(new java.awt.Color(255, 102, 102));
        jbtnCerrar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbtnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/cerrar.png"))); // NOI18N
        jbtnCerrar.setText("Cerrar");
        jbtnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCerrarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnCerrar);

        jPanelSur.add(jPanelBotones, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelSur, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbtnCerrarActionPerformed

    private void jbtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAgregarActionPerformed
        Usuario user;
        Usuario nuevo_usario;
        String confirmacion;
        
        if(validarFormulario())
        {
            String usuario_id = get_identificacion();
            String nombre_usario = getNombre_Usuario();
            String contrasenia = getContrasenia();
            String nombre_completo = getNombre_Completo();
            String fecha_creacion = getFecha_Creacion();
            String cargo = getCargo();
            
            user = gestor_usuarios.consultar_Usuario(usuario_id);
            if(user == null)
            {
                gestor_usuarios.setRespuesta("");
                nuevo_usario = new Usuario(usuario_id, nombre_usario, contrasenia, nombre_completo, fecha_creacion, cargo);
                confirmacion = gestor_usuarios.agregar_Usuario(nuevo_usario); 
                Utilidades.mensajeExito(confirmacion, "Registro Usuario.");
                limpiarCampos(true);
            }
            else
            {
                Utilidades.mensajeError("El Usuario con ese ID ya se encuentra registrado.", "Advertencia");
                limpiarCampos(true);
            }
        }
        botoneEstadoInicial();
    }//GEN-LAST:event_jbtnAgregarActionPerformed

    private void jbtnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditarActionPerformed
        Usuario user;
        Usuario editar_usario;
        String confirmacion;
        
        if(validarFormulario())
        {
            String usuario_id = get_identificacion();
            String nombre_usario = getNombre_Usuario();
            String contrasenia = getContrasenia();
            String nombre_completo = getNombre_Completo();
            String fecha_creacion = getFecha_Creacion();
            String cargo = getCargo();
            
            user = gestor_usuarios.consultar_Usuario(usuario_id);
            if(user != null)
            {
                gestor_usuarios.setRespuesta("");
                editar_usario = new Usuario(usuario_id, nombre_usario, contrasenia, nombre_completo, fecha_creacion, cargo);
                confirmacion = gestor_usuarios.editar_Usuario(editar_usario);
                Utilidades.mensajeExito(confirmacion, "Editar Usuario.");
                limpiarCampos(true);
            }
            else
            {
                Utilidades.mensajeError("El Usuario con ese ID no se encuentra registrado.", "Advertencia");
                limpiarCampos(true);
            }
        }
        botoneEstadoInicial();
    }//GEN-LAST:event_jbtnEditarActionPerformed

    private void jbtnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnConsultarActionPerformed
        Usuario user;
        Usuario consultar_usario;
        String confirmacion;

        String usuario_id = get_identificacion();
        gestor_usuarios.setRespuesta("");
        user = gestor_usuarios.consultar_Usuario(usuario_id);
            
        if(user != null)
        {
            consultar_usario = user;
            confirmacion = gestor_usuarios.getRespuesta();
            Utilidades.mensajeExito("Se consulto con exito la información del usuario...", "Consultar Usuario.");
                
            jtxtIdentificacion.setText(consultar_usario.getUsuario_id());
            fijarCamposFormulario(consultar_usario);
        }
        else
        {
            Utilidades.mensajeError("El Usuario con ese ID no se encuentra registrado.", "Advertencia");
            limpiarCampos(true);
        }
        
    }//GEN-LAST:event_jbtnConsultarActionPerformed

    private void jbtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEliminarActionPerformed
        Usuario eliminar_usuario;
        String confirmacion;
        
        if(validarFormulario())
        {
            String usuario_id = get_identificacion();
            
            eliminar_usuario = gestor_usuarios.consultar_Usuario(usuario_id);
            if(!(eliminar_usuario == null))
            {
                gestor_usuarios.setRespuesta("");
                confirmacion = gestor_usuarios.eliminar_Usuario(usuario_id);
                Utilidades.mensajeExito(confirmacion, "Eliminar Usuario.");
                limpiarCampos(true);
            }
            else
            {
                Utilidades.mensajeError("El Usuario con ese ID no se encuentra registrado.", "Advertencia");
                limpiarCampos(true);
            }
        }
        botoneEstadoInicial();
    }//GEN-LAST:event_jbtnEliminarActionPerformed

    private void jbtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLimpiarActionPerformed
        limpiarCampos(true);
    }//GEN-LAST:event_jbtnLimpiarActionPerformed

    private void jPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPasswordFocusLost
        String miContrasenia = "";
        char[] password = jPassword.getPassword();
       
        if((password.length >= 5) && (password.length <= 12)) 
        {
            for(int i=0; i<password.length; i++) {
                miContrasenia += password[i];
            }
            boolean password_valida = es_valida_contrasenia(miContrasenia);
            if(password_valida) {
                this.contrasenia_user = miContrasenia;
                jPassword_con.setEditable(true);
            }
            else
            {
                Utilidades.mensajeAdvertencia("La contraseña debe tener al menos un caracter númerico y un caracter especial(+, -, *, /, =, %, &, etc).", "password");
                jPassword.setText("");
            }
           
        }
        else
        {
            Utilidades.mensajeAdvertencia("La contraseña debe tener minimo 5 caracteres y maximo 12 caracteres.", "Password");
            jPassword.setText("");
        }
    }//GEN-LAST:event_jPasswordFocusLost

    private void jPassword_conFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPassword_conFocusLost
        String miContrasenia = "";
        String miContraseniaAUX = this.contrasenia_user;
        char[] password = jPassword_con.getPassword();
        
        if((password.length >= 5) && (password.length <= 12)) 
        {
            for(int i=0; i<password.length; i++) {
                miContrasenia += password[i];
            }
            
            boolean password_valida = es_valida_contrasenia(miContrasenia);
            if(password_valida) 
            {
                boolean son_iguales = son_contrasenias_iguales(miContraseniaAUX, miContrasenia);
                if(son_iguales) {
                    this.contrasenia_user_con = miContrasenia;
                }
                else
                { 
                    Utilidades.mensajeError("Las contraseña no son iguales.", "Password");
                    jPassword_con.setText("");
                    }
                }
            else
            {
                Utilidades.mensajeError("La contraseña debe tener al menos un caracter númerico y un caracter especial(+, -, *, /, =, %, &, etc).", "password");
                jPassword_con.setText("");
            }
        }
        else
        {
            Utilidades.mensajeError("La contraseña debe tener minimo 5 caracteres y maximo 12 caracteres.", "Password");
            jPassword_con.setText("");
        }
    }//GEN-LAST:event_jPassword_conFocusLost

    private void jtxtIdentificacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtIdentificacionFocusLost
        String usuario_ID = jtxtIdentificacion.getText().trim();
        
        if(usuario_ID.equals(""))
        {
            return;
        }
        
        //Busca el Usuario en el Servidor
        Usuario user = null;
        try {
            user = gestor_usuarios.consultar_Usuario(usuario_ID);
        }
        catch(Exception ex) {
            Logger.getLogger(GUIUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            Utilidades.mensajeError("Error al buscar el Usuario en la base de datos del servidor de la Agencia.", "Advertencia.");
        }
        
        if(user == null) 
        {
            Utilidades.mensajeExito("Ingrese la información del Usuario.", "Usuario");
            jbtnAgregar.setEnabled(true);
            jbtnEditar.setEnabled(false);
            jbtnConsultar.setEnabled(false);
            jbtnEliminar.setEnabled(false);
            jtxtNombre_Usuario.requestFocus();
        }
        else
        {
            if(!usuario_ID.equals(""))
            {
                Utilidades.mensajeExito("El Usuario con ese Id se encuentra registrado en el servidor de la Agencia.", "Usuario");
                jbtnAgregar.setEnabled(false);
                jbtnEditar.setEnabled(true);
                jbtnConsultar.setEnabled(true);
                jbtnEliminar.setEnabled(true);
                jtxtNombre_Usuario.requestFocus();
            }
        }
    }//GEN-LAST:event_jtxtIdentificacionFocusLost

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GUIUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GUIUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GUIUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GUIUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GUIUsuarios().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelCargo;
    private javax.swing.JLabel jLabelContrasenia;
    private javax.swing.JLabel jLabelContrasenia_con;
    private javax.swing.JLabel jLabelIdentificacion;
    private javax.swing.JLabel jLabelNombre_Completo;
    private javax.swing.JLabel jLabelNombre_Usuario;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JPanel jPanelBotones;
    private javax.swing.JPanel jPanelCentro;
    private javax.swing.JPanel jPanelSur;
    private javax.swing.JPasswordField jPassword;
    private javax.swing.JPasswordField jPassword_con;
    private javax.swing.JButton jbtnAgregar;
    private javax.swing.JButton jbtnCerrar;
    private javax.swing.JButton jbtnConsultar;
    private javax.swing.JButton jbtnEditar;
    private javax.swing.JButton jbtnEliminar;
    private javax.swing.JButton jbtnLimpiar;
    private javax.swing.JComboBox<String> jcboxCargo;
    private javax.swing.JPanel jpanelNorte;
    private javax.swing.JTextField jtxtIdentificacion;
    private javax.swing.JTextField jtxtNombre_Completo;
    private javax.swing.JTextField jtxtNombre_Usuario;
    // End of variables declaration//GEN-END:variables

    /**
     * Valida que los datos estén correctamente diligenciados en el formulario
     * @return true si están bien diligenciados, false en caso contrario 
     */
    private boolean validarFormulario() {
        if(this.get_identificacion().equals(""))
        {
            Utilidades.mensajeAdvertencia("Debe agregar la identificación del Usuario.", "Atención");
            jtxtIdentificacion.requestFocus();
            return false;
        }
        
        if(this.getNombre_Usuario().equals(""))
        {
            Utilidades.mensajeAdvertencia("Debe agregar un nombre de Usuario.", "Advertencia");
            jtxtNombre_Usuario.requestFocus();
            return false;
        }
        
        if(this.getContrasenia().equals(""))
        {
            Utilidades.mensajeAdvertencia("Debe digitar la contraseña.", "Advertencia");
            jPassword.setText("");
            jPassword_con.setText("");
            jPassword_con.setEditable(false);
            jPassword.requestFocus();
            return false;
        }
        
        if(this.getNombre_Completo().equals(""))
        {
            Utilidades.mensajeAdvertencia("Debe digitar el nombre completo.", "Advertencia");
            jtxtNombre_Completo.requestFocus();
            return false;
        }
        
        if(this.getCargo().equals("NINGUNO"))
        {
            Utilidades.mensajeAdvertencia("Debe seleccionar un cargo para le Usuario.", "Advertencia");
            jcboxCargo.requestFocus();
            return false;
        }
        return true;  
    }
    
    /**
     * Fija los campos de información con los datos del Usuario.
     * @param usuario 
     */
    private void fijarCamposFormulario(Usuario usuario)
    {
        jtxtNombre_Usuario.setText(usuario.getNombre_usuario());
        jPassword.setText(usuario.getContrasenia());
        jPassword_con.setText(usuario.getContrasenia());
        jtxtNombre_Completo.setText(usuario.getNombre_completo());
        jPassword_con.setEditable(false);
    }
    /**
     * Limpia los campos donde se digita la información del usuario.
     * @param limpiar 
     */
    private void limpiarCampos(boolean limpiar) 
    {
        if(limpiar)
        {
            jtxtIdentificacion.setText("");
        }
        jtxtIdentificacion.setText("");
        jtxtNombre_Usuario.setText("");
        jPassword.setText("");
        jPassword_con.setText("");
        jtxtNombre_Completo.setText("");
    }
    
    /**
     * Verifica que la contraseña sea valida, es decir que tenga como minimo un caracte numerico y un caracter especial.
     * @param contrasenia
     * @return bolean 
     */
    private boolean es_valida_contrasenia(String contrasenia) {
        
        boolean es_valida = false;
        char[] mi_password = contrasenia.toCharArray();
           
        char[] digitos = {'1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
        char[] carac_especiales = {'+', '-', '*', '/', '=', '_', '%', '@', '&', '#', '!', '?', '^', '~', '|', ':', ';' ,'.', ','};
        int contador_digitos = 0;
        int contador_caracteres = 0;
            
        for(int i=0; i<mi_password.length; i++) {
            for(int j=0; j<digitos.length; j++) {
                if(mi_password[i] == digitos[j]) {
                       contador_digitos++;
                }
            }
        }
            
        for(int i=0; i<mi_password.length; i++) {
            for(int j=0; j<carac_especiales.length; j++) {
                if(mi_password[i] == carac_especiales[j]) {
                    contador_caracteres++;
                }
            }
        }
           
        if(contador_digitos > 0 && contador_caracteres > 0)
        {
            System.out.print("La contraseña es valida...\n");
            es_valida = true;
        }  
        return es_valida;
    }
    
    /**
     * Verifica si dos contraseña son iguales.
     * @param contrasenia1
     * @param contrasenia2
     * @return boolean
     */
    private boolean son_contrasenias_iguales(String contrasenia1, String contrasenia2)
    {
        boolean son_iguales = false;
        if(contrasenia1.equals(contrasenia2)) {
            son_iguales = true;
        }
        return son_iguales;
    }
}
