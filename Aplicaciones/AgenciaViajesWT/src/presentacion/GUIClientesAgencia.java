/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica_negocio.Cliente;
import logica_negocio.GestorClientes;
import utilidades.Utilidades;

/**
 *
 * @author Alexander Inagan
 */
public class GUIClientesAgencia extends javax.swing.JInternalFrame {

    private final GestorClientes gestor_clientes = new GestorClientes();
    /**
     * Creates new form GUIClientesAgencia
     */
    public GUIClientesAgencia()
    {
        initComponents();
        fijarMensajeExplicacion();
        botonesEstadoInicial();
        inicializarTabla();
    }
    
    /**
     * Inicializa las columnas de la tabla Clientes
     */
    private void inicializarTabla() {

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Identificación", "Nombres", "Apellidos", "Fecha Nacimiento", "E-Mail", "Genero", "Dirección", "Ciudad", "Celular"
                }
        ));
    }

    /**
     * Mensaje inicial del panel superior
     */
    private void fijarMensajeExplicacion()
    {
        StringBuilder sb = new StringBuilder(64);
        sb.append("<html>" + "Bienvenido. Aquí podra gestionar todo lo referente a la informacion.<br>"
                + "de los clientes, es decir podra agregar, editar, consultar y eliminar sus.<br>"
                + "datos correspondientes.<br>"
                + "</html>");
        jLabelTitulo.setText(sb.toString());
    }
    
    /**
     * Deshabilita los botones de Agregar, Editar, Consultar y Eliminar
     */
    private void botonesEstadoInicial() 
    {
        jbtnAgregar.setEnabled(false);
        jbtnEditar.setEnabled(false);
        jbtnConsultar.setEnabled(false);
        jbtnEliminar.setEnabled(false);
    }
    
    private String getId() {
        return jtxtID.getText().trim();
    }

    private String getNombres() {
        return Utilidades.capitalize(jtxtNombres.getText().trim());
    }

    private String getApellidos() {
        return Utilidades.capitalize(jtxtApellidos.getText().trim());
    }
    
    private String getFechaNacimiento() {
        String fechaNacimiento = "";
        if(rSDateCalendar.getDatoFecha() == null) {
            JOptionPane.showMessageDialog(this, "Selecciona una fecha.", "Eror", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            String formatoFecha = "dd/MMMM/yyyy";
            Date fecha = rSDateCalendar.getDatoFecha();
            SimpleDateFormat formateador = new SimpleDateFormat(formatoFecha);
            fechaNacimiento = formateador.format(fecha);
            
        }
        return fechaNacimiento;
    }
    
    private String getEmail() {
        String email = jtxtEmail.getText().trim();
        if(email.equals("") || email.equals("NULL"))
            return "NULL";
        else
            return email;
    }
    
    private String getGenero() {
        String genero = jcboxGenero.getSelectedItem().toString();
        if(genero.equals("Masculino")) {
            genero = "M";
        }
        if(genero.equals("Femenino")) {
            genero = "F";
        }
        if(genero.equals("Escoga una opción")) {
            genero = "NULL";
        }
            
        return genero;
    }
    
    private String getDireccion() {
        String direccion = jtxtDireccion.getText().trim();
        if(direccion.equals("") || direccion.equals("NULL"))
            return "NULL";
        else
            return direccion;
    }
    
    private String getCiudad() {
        String ciudad = jtxtCiudad.getText().trim();
        if(ciudad.equals("") && ciudad.equals("NULL"))
            return "NULL";
        else
            return ciudad;
    }

    private String getCelular() {
        String celular = jtxtCelular.getText().trim();
        if(celular.equals("") || celular.equals("NULL"))
            return "NULL";
        else
            return celular;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelNorte = new javax.swing.JPanel();
        jLabelTitulo = new javax.swing.JLabel();
        PanelCentro = new javax.swing.JPanel();
        jLabelID = new javax.swing.JLabel();
        jtxtID = new javax.swing.JTextField();
        jLabelNombres = new javax.swing.JLabel();
        jtxtNombres = new javax.swing.JTextField();
        jLabelApellidos = new javax.swing.JLabel();
        jtxtApellidos = new javax.swing.JTextField();
        jLabelFecha_Nac = new javax.swing.JLabel();
        rSDateCalendar = new rojeru_san.componentes.RSDateChooser();
        jLabelEmail = new javax.swing.JLabel();
        jtxtEmail = new javax.swing.JTextField();
        jLabelGenero = new javax.swing.JLabel();
        jcboxGenero = new javax.swing.JComboBox<>();
        jLabelDireccion = new javax.swing.JLabel();
        jtxtDireccion = new javax.swing.JTextField();
        jLabelCiudad = new javax.swing.JLabel();
        jtxtCiudad = new javax.swing.JTextField();
        jLabelCelular = new javax.swing.JLabel();
        jtxtCelular = new javax.swing.JTextField();
        PanelSur = new javax.swing.JPanel();
        jPanelBotones = new javax.swing.JPanel();
        jbtnAgregar = new javax.swing.JButton();
        jbtnEditar = new javax.swing.JButton();
        jbtnConsultar = new javax.swing.JButton();
        jbtnEliminar = new javax.swing.JButton();
        jbtnLimpiar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jbtnCerrar = new javax.swing.JButton();
        jPanelDatos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clientes\n");

        PanelNorte.setBackground(new java.awt.Color(230, 230, 118));
        PanelNorte.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Información: \n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 13))); // NOI18N

        jLabelTitulo.setText("lblExplicacion");
        PanelNorte.add(jLabelTitulo);

        getContentPane().add(PanelNorte, java.awt.BorderLayout.NORTH);

        PanelCentro.setBackground(new java.awt.Color(231, 159, 87));
        PanelCentro.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ingrese los siguientes datos: \n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 13))); // NOI18N
        PanelCentro.setLayout(new java.awt.GridLayout(9, 2));

        jLabelID.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        jLabelID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelID.setText("Número de Identificación:  ");
        PanelCentro.add(jLabelID);

        jtxtID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtIDFocusLost(evt);
            }
        });
        PanelCentro.add(jtxtID);

        jLabelNombres.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        jLabelNombres.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelNombres.setText("Nombres:  ");
        PanelCentro.add(jLabelNombres);
        PanelCentro.add(jtxtNombres);

        jLabelApellidos.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        jLabelApellidos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelApellidos.setText("Apellidos:  ");
        PanelCentro.add(jLabelApellidos);
        PanelCentro.add(jtxtApellidos);

        jLabelFecha_Nac.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        jLabelFecha_Nac.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelFecha_Nac.setText("Fecha de Nacimiento:  ");
        PanelCentro.add(jLabelFecha_Nac);
        PanelCentro.add(rSDateCalendar);

        jLabelEmail.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        jLabelEmail.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelEmail.setText("E-mail (Opcional):  ");
        PanelCentro.add(jLabelEmail);
        PanelCentro.add(jtxtEmail);

        jLabelGenero.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        jLabelGenero.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelGenero.setText("Genero:  ");
        PanelCentro.add(jLabelGenero);

        jcboxGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoga una opción", "Masculino", "Femenino" }));
        PanelCentro.add(jcboxGenero);

        jLabelDireccion.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        jLabelDireccion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDireccion.setText("Dirección (Opcional):  ");
        PanelCentro.add(jLabelDireccion);
        PanelCentro.add(jtxtDireccion);

        jLabelCiudad.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        jLabelCiudad.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelCiudad.setText("Ciudad (Opcional):   ");
        PanelCentro.add(jLabelCiudad);
        PanelCentro.add(jtxtCiudad);

        jLabelCelular.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        jLabelCelular.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelCelular.setText("Celular (Opcional):  ");
        PanelCentro.add(jLabelCelular);
        PanelCentro.add(jtxtCelular);

        getContentPane().add(PanelCentro, java.awt.BorderLayout.CENTER);

        PanelSur.setPreferredSize(new java.awt.Dimension(627, 220));
        PanelSur.setLayout(new java.awt.BorderLayout());

        jPanelBotones.setBackground(new java.awt.Color(179, 179, 74));
        jPanelBotones.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Opciones: ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 13))); // NOI18N

        jbtnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/agregar.png"))); // NOI18N
        jbtnAgregar.setText("Agregar");
        jbtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAgregarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnAgregar);

        jbtnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/grabar.png"))); // NOI18N
        jbtnEditar.setText("Editar");
        jbtnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnEditar);

        jbtnConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/buscar.png"))); // NOI18N
        jbtnConsultar.setText("Consultar");
        jbtnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnConsultarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnConsultar);

        jbtnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/remove.png"))); // NOI18N
        jbtnEliminar.setText("Eliminar");
        jbtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEliminarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnEliminar);

        jbtnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/escoba.png"))); // NOI18N
        jbtnLimpiar.setText("Limpiar");
        jbtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLimpiarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnLimpiar);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/aplicar.png"))); // NOI18N
        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanelBotones.add(jButton1);

        jbtnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/cerrar.png"))); // NOI18N
        jbtnCerrar.setText("Cerrar");
        jbtnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCerrarActionPerformed(evt);
            }
        });
        jPanelBotones.add(jbtnCerrar);

        PanelSur.add(jPanelBotones, java.awt.BorderLayout.NORTH);

        jPanelDatos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Datos:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13))); // NOI18N
        jPanelDatos.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBackground(new java.awt.Color(153, 255, 153));

        tblClientes.setBackground(new java.awt.Color(153, 255, 153));
        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblClientes);

        jPanelDatos.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        PanelSur.add(jPanelDatos, java.awt.BorderLayout.CENTER);

        getContentPane().add(PanelSur, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAgregarActionPerformed
        //Información del Cliente
        Cliente cliente_agregar;
        String confirmacion;
        if(validarFormulario())
        {
            String id = getId();
            String nombres = getNombres();
            String apellidos = getApellidos();
            String fecha_nac = getFechaNacimiento();
            String email = getEmail();
            String genero = getGenero();
            String direccion = getDireccion();
            String ciudad = getCiudad();
            String celular = getCelular();
            
            Cliente cli = gestor_clientes.consultar_Cliente(id);
            if(cli == null)
            {
                gestor_clientes.setRespuesta("");
                cliente_agregar = new Cliente(id, nombres, apellidos, fecha_nac, email, genero, direccion, ciudad, celular);
                confirmacion = gestor_clientes.agregar_Cliente(cliente_agregar);
                Utilidades.mensajeExito(confirmacion, "Registro Clientes.");
                limpiarCajas(true);
            }
            else
            {
                Utilidades.mensajeError("El Cliente con esa identificación ya se encuentra registrado.", "Advertencia");
                limpiarCajas(true);
            }
        }
        botonesEstadoInicial();
    }//GEN-LAST:event_jbtnAgregarActionPerformed

    private void jtxtIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtIDFocusLost
        String id_cliente = jtxtID.getText().trim();
        
        if(id_cliente.equals(""))
        {
            return;
        }
        
        //Busca al Cliente en el servidor
        Cliente cli = null;
        try {
            cli = gestor_clientes.consultar_Cliente(id_cliente);
        }
        catch(Exception ex)
        {
            Logger.getLogger(GUIClientesAgencia.class.getName()).log(Level.SEVERE, null, ex);
            Utilidades.mensajeError("Error al buscar el Cliente en la base de datos del servidor de la Agencia.", "Advertencia.");
        }
        
        if(cli == null)
        {
            Utilidades.mensajeExito("Ingrese la información del Cliente.", "Cliente");
            jbtnAgregar.setEnabled(true);
            jbtnEditar.setEnabled(false);
            jbtnConsultar.setEnabled(false);
            jbtnEliminar.setEnabled(false);
            jtxtNombres.requestFocus();
        }
        else
        {
            if(!id_cliente.equals(""))
            {
                Utilidades.mensajeExito("El Cliente con ese Id se encuentra registrado en el servidor de la Agencia.", "Cliente");
                jbtnAgregar.setEnabled(false);
                jbtnEditar.setEnabled(true);
                jbtnConsultar.setEnabled(true);
                jbtnEliminar.setEnabled(true);
                jtxtNombres.requestFocus();
            }
        }
    }//GEN-LAST:event_jtxtIDFocusLost

    private void jbtnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditarActionPerformed
        Cliente cliente_editar;
        String confirmacion;
        if(validarFormulario())
        {
            String id = getId();
            String nombres = getNombres();
            String apellidos = getApellidos();
            String fecha_nac = getFechaNacimiento();
            String email = getEmail();
            String genero = getGenero();
            String direccion = getDireccion();
            String ciudad = getCiudad();
            String celular = getCelular();
            
            Cliente cli = gestor_clientes.consultar_Cliente(id);
            if(cli != null)
            {
                gestor_clientes.setRespuesta("");
                cliente_editar = new Cliente(id, nombres, apellidos, fecha_nac, email, genero, direccion, ciudad, celular);
                confirmacion = gestor_clientes.editar_Cliente(cliente_editar);
                Utilidades.mensajeExito(confirmacion, "Editar Clientes.");
                limpiarCajas(true);
            }
            else
            {
                Utilidades.mensajeError("El Cliente con esa identificación NO se encuentra registrado.", "Advertencia");
                limpiarCajas(true);
            }
        }
        botonesEstadoInicial();
    }//GEN-LAST:event_jbtnEditarActionPerformed

    private void jbtnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnConsultarActionPerformed
        Cliente cliente_consultar;
        String confirmacion;
   
        String id = getId();
        gestor_clientes.setRespuesta("");    
        cliente_consultar = gestor_clientes.consultar_Cliente(id);
        if(cliente_consultar != null)
        {               
                confirmacion = gestor_clientes.getRespuesta();
                Utilidades.mensajeExito("Se consulto con exito la información del cliente.", "Consultar Clientes.");
                
                jtxtID.setText(cliente_consultar.getDoc_id());
                fijarCamposFormulario(cliente_consultar);
        }
        else
        {
            Utilidades.mensajeError("El Cliente con esa identificación NO se encuentra registrado.", "Advertencia");
            limpiarCajas(true);
        }
    }//GEN-LAST:event_jbtnConsultarActionPerformed

    private void jbtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEliminarActionPerformed
        Cliente cliente_eliminar;
        String confirmacion;
       
        if(validarFormulario())
        {
            String id = getId();
            
            cliente_eliminar = gestor_clientes.consultar_Cliente(id);
            if(cliente_eliminar != null)
            {
                if(Utilidades.mensajeConfirmacion("Desea eliminar la información del Cliente: " + cliente_eliminar.getNombres() + "?", "Confirmación") == JOptionPane.YES_OPTION)
                {
                    gestor_clientes.setRespuesta("");
                    confirmacion = gestor_clientes.eliminar_Cliente(id);
                    Utilidades.mensajeExito(confirmacion, "Eliminar Clientes.");
                    limpiarCajas(true);
                }
                else
                {
                    Utilidades.mensajeExito("Usted decidio no eliminar la información del cliente.", "Informe");
                    limpiarCajas(true);
                }
            }
            else
            {
                Utilidades.mensajeError("El Cliente con esa identificación NO se encuentra registrado.", "Advertencia");
                limpiarCajas(true);
            }
        }
        botonesEstadoInicial();
    }//GEN-LAST:event_jbtnEliminarActionPerformed

    private void jbtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLimpiarActionPerformed
        limpiarCajas(true);
    }//GEN-LAST:event_jbtnLimpiarActionPerformed

    private void jbtnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbtnCerrarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        visualizarDatos();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelCentro;
    private javax.swing.JPanel PanelNorte;
    private javax.swing.JPanel PanelSur;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabelApellidos;
    private javax.swing.JLabel jLabelCelular;
    private javax.swing.JLabel jLabelCiudad;
    private javax.swing.JLabel jLabelDireccion;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelFecha_Nac;
    private javax.swing.JLabel jLabelGenero;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelNombres;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JPanel jPanelBotones;
    private javax.swing.JPanel jPanelDatos;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnAgregar;
    private javax.swing.JButton jbtnCerrar;
    private javax.swing.JButton jbtnConsultar;
    private javax.swing.JButton jbtnEditar;
    private javax.swing.JButton jbtnEliminar;
    private javax.swing.JButton jbtnLimpiar;
    private javax.swing.JComboBox<String> jcboxGenero;
    private javax.swing.JTextField jtxtApellidos;
    private javax.swing.JTextField jtxtCelular;
    private javax.swing.JTextField jtxtCiudad;
    private javax.swing.JTextField jtxtDireccion;
    private javax.swing.JTextField jtxtEmail;
    private javax.swing.JTextField jtxtID;
    private javax.swing.JTextField jtxtNombres;
    private rojeru_san.componentes.RSDateChooser rSDateCalendar;
    private javax.swing.JTable tblClientes;
    // End of variables declaration//GEN-END:variables

    /**
     * Valida que los datos estén correctamente diligenciados en el formulario
     *
     * @return true si están bien diligenciados, false en caso contrario
     */
    public boolean validarFormulario()
    {
        if(this.getId().equals(""))
        {
            Utilidades.mensajeAdvertencia("Debe agregar la identificación del empleado", "Atención");
            jtxtID.requestFocus();
            return false;
        }
        
        if(this.getNombres().equals("")) 
        {
            Utilidades.mensajeAdvertencia("Debe agregar los nombres del empleado", "Atención");
            jtxtNombres.requestFocus();
            return false;
        }

        if(this.getApellidos().equals("")) 
        {
            Utilidades.mensajeAdvertencia("Debe agregar los apellidos del empleado", "Atención");
            jtxtApellidos.requestFocus();
            return false;
        }
        
        return true;
    }
    
    /**
     * Convierte un String fecha en una fecha tipo Date
     * @param fechaNac
     * @return Date
     */
    private Date convertirDate(String fechaNac) {
        
        SimpleDateFormat formatoDelTexto = new SimpleDateFormat("dd/MMMM/yyyy");
        Date fecha;
        try {
            fecha = formatoDelTexto.parse(fechaNac);
        }
        catch (ParseException ex) {
            return null;
        }
        return fecha;
    }
    
    /**
     * Fija los campos de texto con la información del Cliente.
     * @param cli 
     */
    private void fijarCamposFormulario(Cliente cli)
    {
        jtxtNombres.setText(cli.getNombres());
        jtxtApellidos.setText(cli.getApellidos());
        rSDateCalendar.setDatoFecha(convertirDate(cli.getFecha_nac()));
        jtxtEmail.setText(cli.getEmail());
        jcboxGenero.setSelectedItem(cli.getGenero());
        jtxtDireccion.setText(cli.getDireccion());
        jtxtCiudad.setText(cli.getCiudad());
        jtxtCelular.setText(cli.getCelular());
    }
    
    /**
     * Limpia los campos de Texto.
     * @param todas 
     */
    public void limpiarCajas(boolean todas) 
    {
        if (todas) {
            jtxtID.setText("");
        }
        jtxtNombres.setText("");
        jtxtApellidos.setText("");
        rSDateCalendar.setDatoFecha(null);
        jtxtEmail.setText("");
        jcboxGenero.setSelectedIndex(0);
        jtxtDireccion.setText("");
        jtxtCiudad.setText("");
        jtxtCelular.setText("");
    }
    
    /**
     * Visualiza los datos almacenado de los clientes en el servidor
     */
    private void visualizarDatos() {
        
        gestor_clientes.setListaClientes(null);
        ArrayList<Cliente> lista_clientes = gestor_clientes.obtener_todos_Clientes();
        
        if(!lista_clientes.isEmpty())
        {
            llenarTabla(lista_clientes);
        }  
    }
    
    /**
     * Llena los datos de los clientes en la tabla
     * @param lista_clientes 
     */
    private void llenarTabla(ArrayList<Cliente> lista_clientes)
    {
        this.inicializarTabla();
        DefaultTableModel model = (DefaultTableModel) tblClientes.getModel();

        Object rowData[] = new Object[9];
        for(Cliente cliente : lista_clientes) {
            rowData[0] = cliente.getDoc_id();
            rowData[1] = cliente.getNombres();
            rowData[2] = cliente.getApellidos();
            rowData[3] = cliente.getFecha_nac();
            rowData[4] = cliente.getEmail();
            rowData[5] = cliente.getGenero();
            rowData[6] = cliente.getDireccion();
            rowData[7] = cliente.getCiudad();
            rowData[8] = cliente.getCelular();
            model.addRow(rowData);
        }
    }
}
